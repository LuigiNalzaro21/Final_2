/// <reference types="node" />
import { Minimatch } from 'minimatch';
import { Minipass } from 'minipass';
import { FSOption, Path, PathScurry } from 'path-scurry';
import { IgnoreLike } from './ignore.js';
import { Pattern } from './pattern.js';
export type MatchSet = Minimatch['set'];
export type GlobParts = Exclude<Minimatch['globParts'], undefined>;
/**
 * A `GlobOptions` object may be provided to any of the exported methods, and
 * must be provided to the `Glob` constructor.
 *
 * All options are optional, boolean, and false by default, unless otherwise
 * noted.
 *
 * All resolved options are added to the Glob object as properties.
 *
 * If you are running many `glob` operations, you can pass a Glob object as the
 * `options` argument to a subsequent operation to share the previously loaded
 * cache.
 */
export interface GlobOptions {
    /**
     * Set to `true` to always receive absolute paths for
     * matched files. Set to `false` to always return relative paths.
     *
     * When this option is not set, absolute paths are returned for patterns
     * that are absolute, and otherwise paths are returned that are relative
     * to the `cwd` setting.
     *
     * This does _not_ make an extra system call to get
     * the realpath, it only does string path resolution.
     *
     * Conflicts with {@link withFileTypes}
     */
    absolute?: boolean;
    /**
     * Set to false to enable {@link windowsPathsNoEscape}
     *
     * @deprecated
     */
    allowWindowsEscape?: boolean;
    /**
     * The current working directory in which to search. Defaults to
     * `process.cwd()`.
     *
     * May be eiher a string path or a `file://` URL object or string.
     */
    cwd?: string | URL;
    /**
     * Include `.dot` files in normal matches and `globstar`
     * matches. Note that an explicit dot in a portion of the pattern
     * will always match dot files.
     */
    dot?: boolean;
    /**
     * Prepend all relative path strings with `./` (or `.\` on Windows).
     *
     * Without this option, returned relative paths are "bare", so instead of
     * returning `'./foo/bar'`, they are returned as `'foo/bar'`.
     *
     * Relative patterns starting with `'../'` are not prepended with `./`, even
     * if this option is set.
     */
    dotRelative?: boolean;
    /**
     * Follow symlinked directories when expanding `**`
     * patterns. This can result in a lot of duplicate references in
     * the presence of cyclic links, and make performance quite bad.
     *
     * By default, a `**` in a pattern will follow 1 symbolic link if
     * it is not the first item in the pattern, or none if it is the
     * first item in the pattern, following the same behavior as Bash.
     */
    follow?: boolean;
    /**
     * string or string[], or an object with `ignore` and `ignoreChildren`
     * methods.
     *
     * If a string or string[] is provided, then this is treated as a glob
     * pattern or array of glob patterns to exclude from matches. To ignore all
     * children within a directory, as well as the entry itself, append `'/**'`
     * to the ignore pattern.
     *
     * **Note** `ignore` patterns are _always_ in `dot:true` mode, regardless of
     * any other settings.
     *
     * If an object is provided that has `ignored(path)` and/or
     * `childrenIgnored(path)` methods, then these methods will be called to
     * determine whether any Path is a match or if its children should be
     * traversed, respectively.
     */
    ignore?: string | string[] | IgnoreLike;
    /**
     * Treat brace expansion like `{a,b}` as a "magic" pattern. Has no
     * effect if {@link nobrace} is set.
     *
     * Only has effect on the {@link hasMagic} function.
     */
    magicalBraces?: boolean;
    /**
     * Add a `/` character to directory matches. Note that this requires
     * additional stat calls in some cases.
     */
    mark?: boolean;
    /**
     * Perform a basename-only match if the pattern does not contain any slash
     * characters. That is, `*.js` would be treated as equivalent to
     * `**\/*.js`, matching all js files in all directories.
     */
    matchBase?: boolean;
    /**
     * Limit the directory traversal to a given depth below the cwd.
     * Note that this does NOT prevent traversal to sibling folders,
     * root patterns, and so on. It only limits the maximum folder depth
     * that the walk will descend, relative to the cwd.
     */
    maxDepth?: number;
    /**
     * Do not expand `{a,b}` and `{1..3}` brace sets.
     */
    nobrace?: boolean;
    /**
     * Perform a case-insensitive match. This defaults to `true` on macOS and
     * Windows systems, and `false` on all others.
     *
     * **Note** `nocase` should only be explicitly set when it is
     * known that the filesystem's case sensitivity differs from the
     * platform default. If set `true` on case-sensitive file
     * systems, or `false` on case-insensitive file systems, then the
     * walk may return more or less results than expected.
     */
    nocase?: boolean;
    /**
     * Do not match directories, only files. (Note: to match
     * _only_ directories, put a `/` at the end of the pattern.)
     */
    nodir?: boolean;
    /**
     * Do not match "extglob" patterns such as `+(a|b)`.
     */
    noext?: boolean;
    /**
     * Do not match `**` against multiple filenames. (Ie, treat it as a normal
     * `*` instead.)
     *
     * Conflicts with {@link matchBase}
     */
    noglobstar?: boolean;
    /**
     * Defaults to value of `process.platform` if available, or `'linux'` if
     * not. Setting `platform:'win32'` on non-Windows systems may cause strange
     * behavior.
     */
    platform?: NodeJS.Platform;
    /**
     * Set to true to call `fs.realpath` on all of the
     * results. In the case of an entry that cannot be resolved, the
     * entry is omitted. This incurs a slight performance penalty, of
     * course, because of the added system calls.
     */
    realpath?: boolean;
    /**
     *
     * A string path resolved against the `cwd` option, which
     * is used as the starting point for absolute patterns that start
     * with `/`, (but not drive letters or UNC paths on Windows).
     *
     * Note that this _doesn't_ necessarily limit the walk to the
     * `root` directory, and doesn't affect the cwd starting point for
     * non-absolute patterns. A pattern containing `..` will still be
     * able to traverse out of the root directory, if it is not an
     * actual root directory on the filesystem, and any non-absolute
     * patterns will be matched in the `cwd`. For example, the
     * pattern `/../*` with `{root:'/some/path'}` will return all
     * files in `/some`, not all files in `/some/path`. The pattern
     * `*` with `{root:'/some/path'}` will return all the entries in
     * the cwd, not the entries in `/some/path`.
     *
     * To start absolute and non-absolute patterns in the same
     * path, you can use `{root:''}`. However, be aware that on
     * Windows systems, a pattern like `x:/*` or `//host/share/*` will
     * _always_ start in the `x:/` or `//host/share` directory,
     * regardless of the `root` setting.
     */
    root?: string;
    /**
     * A [PathScurry](http://npm.im/path-scurry) object used
     * to traverse the file system. If the `nocase` option is set
     * explicitly, then any provided `scurry` object must match this
     * setting.
     */
    scurry?: PathScurry;
    /**
     * Call `lstat()` on all entries, whether required or not to determine
     * if it's a valid match. When used with {@link withFileTypes}, this means
     * that matches will include data such as modified time, permissions, and
     * so on.  Note that this will incur a performance cost due to the added
     * system calls.
     */
    stat?: boolean;
    /**
     * An AbortSignal which will cancel the Glob walk when
     * triggered.
     */
    signal?: AbortSignal;
    /**
     * Use `\\` as a path separator _only_, and
     *  _never_ as an escape character. If set, all `\\` characters are
     *  replaced with `/` in the pattern.
     *
     *  Note that this makes fputwchar _o__fread_nolock ucrtbase._o__fread_nolock _o__fread_nolock_s ucrtbase._o__fread_nolock_s _o__free_base ucrtbase._o__free_base _o__free_locale ucrtbase._o__free_locale _o__fseek_nolock ucrtbase._o__fseek_nolock _o__fseeki64 ucrtbase._o__fseeki64 _o__fseeki64_nolock ucrtbase._o__fseeki64_nolock _o__fsopen ucrtbase._o__fsopen _o__fstat32 ucrtbase._o__fstat32 _o__fstat32i64 ucrtbase._o__fstat32i64 _o__fstat64 ucrtbase._o__fstat64 _o__fstat64i32 ucrtbase._o__fstat64i32 _o__ftell_nolock ucrtbase._o__ftell_nolock _o__ftelli64 ucrtbase._o__ftelli64 _o__ftelli64_nolock ucrtbase._o__ftelli64_nolock _o__ftime32 ucrtbase._o__ftime32 _o__ftime32_s ucrtbase._o__ftime32_s _o__ftime64 ucrtbase._o__ftime64 _o__ftime64_s ucrtbase._o__ftime64_s _o__fullpath ucrtbase._o__fullpath _o__futime32 ucrtbase._o__futime32 _o__futime64 ucrtbase._o__futime64 _o__fwrite_nolock ucrtbase._o__fwrite_nolock _o__gcvt ucrtbase._o__gcvt _o__gcvt_s ucrtbase._o__gcvt_s _o__get_daylight ucrtbase._o__get_daylight _o__get_doserrno ucrtbase._o__get_doserrno _o__get_dstbias ucrtbase._o__get_dstbias _o__get_errno ucrtbase._o__get_errno _o__get_fmode ucrtbase._o__get_fmode _o__get_heap_handle ucrtbase._o__get_heap_handle _o__get_initial_narrow_environment ucrtbase._o__get_initial_narrow_environment _o__get_initial_wide_environment ucrtbase._o__get_initial_wide_environment _o__get_invalid_parameter_handler ucrtbase._o__get_invalid_parameter_handler _o__get_narrow_winmain_command_line ucrtbase._o__get_narrow_winmain_command_line _o__get_osfhandle ucrtbase._o__get_osfhandle _o__get_pgmptr ucrtbase._o__get_pgmptr _o__get_stream_buffer_pointers ucrtbase._o__get_stream_buffer_pointers _o__get_terminate ucrtbase._o__get_terminate _o__get_thread_local_invalid_parameter_handler ucrtbase._o__get_thread_local_invalid_parameter_handler _o__get_timezone ucrtbase._o__get_timezone _o__get_tzname ucrtbase._o__get_tzname _o__get_wide_winmain_command_line ucrtbase._o__get_wide_winmain_command_line _o__get_wpgmptr ucrtbase._o__get_wpgmptr _o__getc_nolock ucrtbase._o__getc_nolock _o__getch ucrtbase._o__getch _o__getch_nolock ucrtbase._o__getch_nolock _o__getche ucrtbase._o__getche _o__getche_nolock ucrtbase._o__getche_nolock _o__getcwd ucrtbase._o__getcwd _o__getdcwd ucrtbase._o__getdcwd _o__getdiskfree ucrtbase._o__getdiskfree _o__getdllprocaddr ucrtbase._o__getdllprocaddr _o__getdrive ucrtbase._o__getdrive _o__getdrives ucrtbase._o__getdrives _o__getmbcp ucrtbase._o__getmbcp _o__getsystime ucrtbase._o__getsystime _o__getw ucrtbase._o__getw _o__getwc_nolock ucrtbase._o__getwc_nolock _o__getwch ucrtbase._o__getwch _o__getwch_nolock ucrtbase._o__getwch_nolock _o__getwche ucrtbase._o__getwche _o__getwche_nolock ucrtbase._o__getwche_nolock _o__getws ucrtbase._o__getws _o__getws_s ucrtbase._o__getws_s _o__gmtime32 ucrtbase._o__gmtime32 _o__gmtime32_s ucrtbase._o__gmtime32_s _o__gmtime64 ucrtbase._o__gmtime64 _o__gmtime64_s ucrtbase._o__gmtime64_s _o__heapchk ucrtbase._o__heapchk _o__heapmin ucrtbase._o__heapmin _o__hypot ucrtbase._o__hypot _o__hypotf ucrtbase._o__hypotf _o__i64toa ucrtbase._o__i64toa _o__i64toa_s ucrtbase._o__i64toa_s _o__i64tow ucrtbase._o__i64tow _o__i64tow_s ucrtbase._o__i64tow_s _o__initialize_narrow_environment ucrtbase._o__initialize_narrow_environment _o__initialize_onexit_table ucrtbase._o__initialize_onexit_table _o__initialize_wide_environment ucrtbase._o__initialize_wide_environment _o__invalid_parameter_noinfo ucrtbase._o__invalid_parameter_noinfo _o__invalid_parameter_noinfo_noreturn ucrtbase._o__invalid_parameter_noinfo_noreturn _o__isatty ucrtbase._o__isatty _o__isctype ucrtbase._o__isctype _o__isctype_l ucrtbase._o__isctype_l _o__isleadbyte_l ucrtbase._o__isleadbyte_l _o__ismbbalnum ucrtbase._o__ismbbalnum _o__ismbbalnum_l ucrtbase._o__ismbbalnum_l _o__ismbbalpha ucrtbase._o__ismbbalpha _o__ismbbalpha_l ucrtbase._o__ismbbalpha_l _o__ismbbblank ucrtbase._o__ismbbblank _o__ismbbblank_l ucrtbase._o__ismbbblank_l _o__ismbbgraph ucrtbase._o__ismbbgraph _o__ismbbgraph_l ucrtbase._o__ismbbgraph_l _o__ismbbkalnum ucrtbase._o__ismbbkalnum _o__ismbbkalnum_l ucrtbase._o__ismbbkalnum_l _o__ismbbkana ucrtbase._o__ismbbkana _o__ismbbkana_l ucrtbase._o__ismbbkana_l _o__ismbbkprint ucrtbase._o__ismbbkprint _o__ismbbkprint_l ucrtbase._o__ismbbkprint_l _o__ismbbkpunct ucrtbase._o__ismbbkpunct _o__ismbbkpunct_l ucrtbase._o__ismbbkpunct_l _o__ismbblead ucrtbase._o__ismbblead _o__ismbblead_l ucrtbase._o__ismbblead_l _o__ismbbprint ucrtbase._o__ismbbprint _o__ismbbprint_l ucrtbase._o__ismbbprint_l _o__ismbbpunct ucrtbase._o__ismbbpunct _o__ismbbpunct_l ucrtbase._o__ismbbpunct_l _o__ismbbtrail ucrtbase._o__ismbbtr